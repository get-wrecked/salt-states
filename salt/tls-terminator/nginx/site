{% for upstream_identifier, upstream in upstreams.items() -%}
upstream {{ upstream_identifier }} {
    {% for server in upstream.servers -%}
    server {{ server.hostname }}:{{ server.port }}{{ ' ' + server.arguments if server.arguments else '' }};
    {% endfor -%}
    {% if upstream.least_conn -%}
    least_conn;
    {% endif -%}
    keepalive {{ upstream.keepalive }};
}

{% endfor -%}

server {
  listen [::]:80{{ ' ' + listen_parameters if listen_parameters else '' }};
  server_name {{ server_name }};
  charset utf-8;
  return 301 https://{{ https_redirect }}$request_uri;
}

server {
  listen [::]:443 http2 ssl{{ ' ' + listen_parameters if listen_parameters else '' }};
  server_name {{ server_name }};
  charset utf-8;

  client_max_body_size {{ client_max_body_size }};

  {% for cert in certs -%}
  ssl_certificate {{ cert.cert }};
  ssl_certificate_key {{ cert.key }};
  {% endfor %}

  {% for error_code in error_pages -%}
  error_page {{ error_code }} /{{ error_code }}-{{ server_name }};
  {% endfor %}

  {% for extra_server_dict in extra_server_config -%}
  {% for key, value in extra_server_dict.items() -%}
  {{ key }} {{ value }};
  {% endfor -%}
  {% endfor -%}

  {% if client_cert_path -%}
  ssl_verify_client on;
  ssl_client_certificate {{ client_cert_path }};
  ssl_verify_depth 3;

  {% endif %}

  {% for url, backend in backends.items() -%}
  location {{ url }} {
    {% if backend.redirect -%}
    return {{ backend.redirect.status }} {{ backend.redirect.url }}{% if backend.redirect.include_uri %}$request_uri{% endif %};
    {% else -%}
    {% if backend.use_upstream_block -%}
    {# Only use the upstream block if necessary -#}
    proxy_pass {{ backend.protocol }}://{{ backend.upstream_identifier }}{{ backend.path }};
    {% else -%}
    # Use variables to ensure nginx will respect the DNS TTL
    set $upstream_hostname "{{ backend.hostname }}";
    proxy_pass {{ backend.protocol }}://$upstream_hostname:{{ backend.port }}{{ backend.path }};
    {%- endif %}
    {%- endif %}

    {% if backend.pam_auth -%}
    # Restrict access to users on this machine with PAM
    auth_pam "Restricted";
    auth_pam_service_name "nginx";
    {% endif -%}

    {% if backend.rate_limit -%}
    limit_req {{ backend.rate_limit }};
    {% endif -%}

    # Needs to be specified for each location since cache_params includes an
    # add_header statement which would otherwise drop everything specified in a
    # different context
    {% for header, val in backend.headers.items() -%}
    add_header {{ header }} '{{ val }}' always;
    {% endfor %}

    {% if not nested -%}
    include cache_params;
    {% endif -%}
    include proxy_params;

    proxy_set_header Host "{{ backend.upstream_hostname }}";

    proxy_ssl_trusted_certificate '{{ backend.upstream_trust_root }}';
    proxy_ssl_server_name on;
    proxy_ssl_name {{ backend.upstream_hostname }};

    {% if backend.proxy_client_cert_path -%}
    proxy_ssl_certificate '{{ backend.proxy_client_cert_path }}';
    proxy_ssl_certificate_key '{{ backend.proxy_client_key_path }}';

    {% endif -%}

    # The verification depth needed for Heroku is currently only 2, but since they might
    # change CA and certificate layout on a whim we allow a depth of 3.
    proxy_ssl_verify_depth 3;

    {% for extra_location_dict in backend.extra_location_config -%}
    {% for key, value in extra_location_dict.items() -%}
    {{ key }} {{ value }};
    {% endfor -%}
    {% endfor %}
  }

  {% endfor -%}

  {% for extra_location, block in extra_locations.items() %}
  location {{ extra_location }} {

    {% for header, val in headers.items() -%}
    add_header {{ header }} '{{ val }}' always;
    {% endfor %}

    {{ block }}
  }
  {% endfor %}

  {% for error_code, content in error_pages.items() %}
  location = /{{ error_code }}-{{ server_name }} {
    root /etc/nginx/html;

    {% for header, val in headers.items() -%}
    add_header {{ header }} '{{ val }}' always;
    {% endfor %}

    {# Skip extension on the file so that we can set any content-type -#}
    default_type {{ content['content_type'] }};
    internal;
  }
  {% endfor %}
}
